"""
D. Лей, лей, не жалей

Язык	Ограничение времени	Ограничение памяти	Ввод	Вывод
Все языки	6 секунд	512Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
C++20 (GCC 14.1)	3 секунды	512Mb
C++20 (Clang 18.1.6)	3 секунды	512Mb
Python 3.9 (PyPy 7.3.16)	10 секунд	512Mb
Python 3.12.3	10 секунд	512Mb

В известной компании Тындекс уже несколько лет работает очень популярный сервис Тындекс.Вода, занимающийся поливом людей, растений, зданий и всего остального, что можно полить без ущерба окружающим.
Пользователь указывает, что ему необходимо полить и сколько литров воды он готов на это потратить, после чего на место выезжает специальная бригада. В итоге для компании каждый заказ можно представить тройкой чисел:
•	время Start, когда бригада приняла заказ и выехала;
•	время End, когда бригада осуществила заказ и освободилась;
•	итоговая стоимость заказа Cost.
Для простоты обработки и хранения время задается одним целым числом, равным количеству минут, прошедших с начала запуска сервиса до искомого момента.
Продолжительность заказа считается равной величине End−Start.
Начальнику сервиса необходимо отчитаться перед вышестоящим начальством, поэтому он поручил вам несложную задачку — найти ответы на несколько запросов одного из двух типов:
1.	Найти суммарную стоимость заказов, которые начались в заданный промежуток времени;
2.	Найти суммарную продолжительность заказов, которые завершились в заданный промежуток времени;
В обеих статистиках промежутки считаются отрезками: в промежуток от Start до End входят все величины Start, Start+1, …, End−1, End.
Формат ввода
В первой строке расположено одно целое число N (1≤N≤200000) — количество заказов, осуществленных сервисом.
Каждая из следующих N строк содержит информацию об одном заказе в формате StartEndCost (1≤Start<End≤109;1≤Cost≤109) — время начала и конца заказа и стоимость заказа соответственно.
В следующей строке расположено одно целое число Q (1≤Q≤200000) — количество запросов.
Каждая из следующих Q строк содержит информацию об одном запросе в формате StartEndType (1≤Start≤End≤109;1≤Type≤2) — время начала и конца промежутка и тип запроса соответственно.
Соответствие типов запроса следующее:
1.	Найти суммарную стоимость заказов, которые начались в заданный промежуток времени;
2.	Найти суммарную продолжительность заказов, которые завершились в заданный промежуток времени;
Формат вывода
В единственной строке через пробел выведите Q целых чисел — ответы на запросы в порядке их ввода.

Пример 1
Ввод
1
10 100 1000
6
1 10 1
1 10 2
10 100 1
10 100 2
100 1000 1
100 1000 2
Вывод
1000 0 1000 90 0 90

Пример 2
Ввод
5
5 20 5
6 21 4
6 22 3
7 23 2
10 24 1
3
6 11 1
4 6 1
7 11 1
Вывод
10 12 3

Пример 3
Ввод
7
3 6 1
4 6 2
3 4 3
4 10 100500
4 11 777
3 8 365
4 8 31
6
6 6 2
6 8 2
5 9 2
3 12 2
9 12 2
8 12 2
Вывод
5 14 14 28 13 22

Примечания
Первый тестовый пример.
Есть данные про 1 заказ:
1.	c 10-й по 100-ю минуту стоимостью 1000;
Необходимо ответить на следующие 6 запросов:
1.	суммарная стоимость заказов, начавшихся в промежутке между 1-й и 10-й минутами;
2.	суммарная продолжительность заказов, закончившихся в промежутке между 1-й и 10-й минутами;
3.	суммарная стоимость заказов, начавшихся в промежутке между 10-й и 100-й минутами;
4.	суммарная продолжительность заказов, закончившихся в промежутке между 10-й и 100-й минутами;
5.	суммарная стоимость заказов, начавшихся в промежутке между 100-й и 1000-й минутами;
6.	суммарная продолжительность заказов, закончившихся в промежутке между 100-й и 1000-й минутами.
Единственный в тесте заказ подходит под:
•	первый запрос, так как начало запроса 10 удовлетворяет условию 1≤10≤10;
•	третий запрос, так как начало запроса 10 удовлетворяет условию 10≤10≤100;
•	четвертый запрос, так как конец запроса 100 удовлетворяет условию 10≤100≤100;
•	шестой запрос, так как конец запроса 100 удовлетворяет условию 100≤100≤1000;
Второй тестовый пример.
Есть данные про 5 заказов:
1.	c 5-й по 20-й минуту стоимостью 5;
2.	c 6-й по 21-ю минуту стоимостью 4;
3.	c 6-й по 22-ю минуту стоимостью 3;
4.	c 7-й по 23-ю минуту стоимостью 2;
5.	c 10-й по 24-ю минуту стоимостью 1.
Необходимо ответить на следующие 3 запроса про суммарную стоимость заказов, начавшихся в заданном промежутке:
1.	между 6-й и 11-й минутами;
2.	между 4-й и 6-й минутами;
3.	между 7-й и 11-й минутами;
Под первый запрос подходят заказы 2, 3, 4, 5, поэтому ответом на запрос будет их суммарная стоимость 4+3+2+1= 10.
Под второй запрос подходят заказы 1, 2 и 3 — поэтому ответом будет 5+4+3= 12.
Третьему запросу удовлетворяют лишь заказы 4, 5, поэтому ответом на запрос будет 2+1= 3.
Третий тестовый пример.
Есть данные про 7 заказов:
1.	c 3-й по 6-ю минуту стоимостью 1;
2.	c 4-й по 6-ю минуту стоимостью 2;
3.	c 3-й по 4-ю минуту стоимостью 3;
4.	c 4-й по 10-ю минуту стоимостью 100500;
5.	c 4-й по 11-ю минуту стоимостью 777;
6.	c 3-й по 8-ю минуту стоимостью 365;
7.	c 4-й по 8-ю минуту стоимостью 31.
Необходимо ответить на следующие 6 запросов про суммарную продолжительность заказов, закончившихся в заданном промежутке:
1.	между 6-й и 6-й минутами;
2.	между 6-й и 8-й минутами;
3.	между 5-й и 9-й минутами;
4.	между 3-й и 12-й минутами;
5.	между 9-й и 12-й минутами;
6.	между 8-й и 12-й минутами;
Под первый запрос подходят заказы 1 и 2 заказы, поэтому ответом на запрос будет их суммарная продолжительность (6−3)+(6−4)=3+2= 5.
Под второй запрос подходят заказы 1, 2, 6 и 7 — их суммарная продолжительность равна (6−3)+(6−4)+(8−3)+(8−4)=3+2+5+4= 14.
Третьему запросу удовлетворяют те же самые заказы, что и под второй — поэтому ответ также равен 14.
Четвертый запрос включает в себя вообще все заказы, поэтому ответ на данный запрос равен (6−3)+(6−4)+(4−3)+(10−4)+(11−4)+(8−3)+(8−4)=3+2+1+6+7+5+4= 28.
В пятом запросе рассматриваются заказы 4 и 5 — ответом будет (10−4)+(11−4)=6+7= 13.
Последний, шестой запрос затрагивает запросы 4, 5, 6 и 7 — их суммарная продолжительность равна (10−4)+(11−4)+(8−3)+(8−4)=6+7+5+4= 22.

"""
result_list = []
N = int(input())
order_events = []
for i in range(N):
    order_start, order_end, order_cost = map(int, input().split())
    order_events.append((order_start, order_end, order_cost))
order_events = tuple(order_events)
Q = int(input())
ask_events = []
for j in range(Q):
    ask_start, ask_end, ask_type = map(int, input().split())
    sum_cost = sum_time = 0
    for i in range(N):
        order_start, order_end, order_cost = order_events[i]
        if ask_type == 1 and ask_start <= order_start <= ask_end:
            sum_cost += order_cost
        elif ask_type == 2 and ask_start <= order_end <= ask_end:
            sum_time += order_end - order_start
    if ask_type == 1:
        result_list.append(str(sum_cost))
    elif ask_type == 2:
        result_list.append(str(sum_time))

print(' '.join(result_list))
